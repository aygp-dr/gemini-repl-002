#+TITLE: Gemini REPL
#+AUTHOR: jwalsh + Claude
#+DATE: 2025-07-15
#+STARTUP: overview

* Overview

A simple ClojureScript console application that provides a REPL-like interface for interacting with Google's Gemini API. This project emphasizes formal verification and reproducible builds through literate programming.

** Key Features

- 🎯 REPL-style interaction with Gemini API
- 📝 Conversation history and context tracking
- 🛠️ Slash command structure (=/help=, =/exit=, =/clear=, =/stats=, =/context=, =/debug=)
- ✅ Formal specifications using TLA+ and Alloy
- 🔄 Live reload development environment
- 📊 Token usage tracking and cost estimation
- 🪵 Comprehensive logging (FIFO and file)

* Installation

** Prerequisites

- Node.js (v16 or higher)
- npm or yarn
- Java (for formal verification tools)
- Emacs (optional, for org-mode tangling)

** Quick Start

#+BEGIN_SRC bash
# Clone the repository
git clone https://github.com/jwalsh/gemini-repl.git
cd gemini-repl

# Install dependencies
npm install

# Copy environment template
cp .env.example .env

# Edit .env and add your Gemini API key
# Get your key from: https://makersuite.google.com/app/apikey

# Build and run
make run
#+END_SRC

* Usage

** Basic Commands

Start the REPL:
#+BEGIN_SRC bash
make run
# or
node target/main.js
#+END_SRC

** REPL Commands

| Command      | Description                         |
|--------------+-------------------------------------|
| =/help=      | Show available commands             |
| =/exit=      | Exit the REPL                       |
| =/clear=     | Clear conversation history          |
| =/stats=     | Show token usage and costs          |
| =/context=   | Display current conversation        |
| =/debug=     | Toggle debug logging                |

** Example Session

#+BEGIN_EXAMPLE
=== Gemini REPL ===
Type /help for commands or your message to chat

gemini> Hello, can you explain quantum computing?

Quantum computing is a revolutionary approach to computation that leverages...
[🟢 245 tokens | $0.0001 | 0.8s]

gemini> What are qubits?

Qubits, or quantum bits, are the fundamental units of quantum information...
[🟢 312 tokens | $0.0002 | 0.9s]

gemini> /stats

Usage Statistics:
  Total requests: 2
  Total tokens: 557
  Estimated cost: $0.0003

gemini> /exit
Goodbye!
#+END_EXAMPLE

* Development

** Project Structure

#+BEGIN_EXAMPLE
gemini-repl/
├── src/                    # ClojureScript source code
│   └── gemini_repl/
│       └── core.cljs      # Main REPL implementation
├── test/                   # Test files
├── specs/                  # Formal specifications (TLA+/Alloy)
├── .claude/                # Claude AI command definitions
├── .github/                # GitHub Actions and templates
├── scripts/                # Build and utility scripts
├── resources/              # Static resources (banner, etc.)
├── change-requests/        # Design documents
├── experiments/            # Experimental features
├── research/               # Research notes
└── tools/                  # Development tools
#+END_EXAMPLE

** Development Workflow

1. **Start development server with live reload:**
   #+BEGIN_SRC bash
   make dev
   # or
   npx shadow-cljs watch app
   #+END_SRC

2. **Run tests:**
   #+BEGIN_SRC bash
   make test
   #+END_SRC

3. **Check formal specifications:**
   #+BEGIN_SRC bash
   cd specs && make check-tla
   #+END_SRC

4. **Lint code:**
   #+BEGIN_SRC bash
   make lint
   #+END_SRC

** Building from Org-Mode Sources

This project uses literate programming with org-mode:

1. **Tangle all setup files:**
   #+BEGIN_SRC bash
   emacs --batch -l org SETUP.org -f org-babel-tangle
   emacs --batch -l org NODE-SETUP.org -f org-babel-tangle
   # etc...
   #+END_SRC

2. **Or use the consolidated approach (v003+):**
   #+BEGIN_SRC bash
   make tangle-all
   #+END_SRC

* Configuration

** Environment Variables

Configure via =.env= file:

| Variable              | Description                      | Default                          |
|-----------------------+----------------------------------+----------------------------------|
| =GEMINI_API_KEY=      | Your Gemini API key (required)   | -                                |
| =GEMINI_LOG_ENABLED=  | Enable logging                   | false                            |
| =GEMINI_LOG_FILE=     | Log file path                    | logs/gemini-repl.log             |
| =GEMINI_LOG_FIFO=     | FIFO path for real-time logs     | /tmp/gemini-repl.fifo            |
| =GEMINI_MODEL=        | Gemini model to use              | gemini-pro                       |

** Logging

Enable comprehensive logging:

#+BEGIN_SRC bash
# In .env
GEMINI_LOG_ENABLED=true

# Watch logs in real-time
tail -f logs/gemini-repl.log

# Or use FIFO
mkfifo /tmp/gemini-repl.fifo
cat /tmp/gemini-repl.fifo | jq .
#+END_SRC

* Formal Verification

This project includes formal specifications:

- **TLA+**: Behavioral specifications for command processing and API interactions
- **Alloy**: Structural models for system state validation

Run verification:
#+BEGIN_SRC bash
make verify-specs
#+END_SRC

* Contributing

1. Fork the repository
2. Create a feature branch (=git checkout -b feature/amazing-feature=)
3. Write tests for your changes
4. Ensure all tests pass (=make test=)
5. Update formal specifications if needed
6. Commit your changes (=git commit -m 'feat: add amazing feature'=)
7. Push to the branch (=git push origin feature/amazing-feature=)
8. Open a Pull Request

See =.github/CONTRIBUTING.md= for detailed guidelines.

* License

This project is licensed under the MIT License - see the [[file:LICENSE][LICENSE]] file for details.

* Acknowledgments

- Google Gemini team for the API
- ClojureScript community for the excellent tooling
- TLA+ and Alloy communities for formal methods tools

* Links

- [[https://github.com/jwalsh/gemini-repl][GitHub Repository]]
- [[https://makersuite.google.com/][Google AI Studio]] - Get your API key
- [[https://shadow-cljs.org/][Shadow-CLJS Documentation]]
- [[https://lamport.azurewebsites.net/tla/tla.html][TLA+ Resources]]
