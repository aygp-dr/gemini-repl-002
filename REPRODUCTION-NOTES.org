#+TITLE: REPRODUCTION-NOTES.org - Learnings from Gemini REPL Rebuild
#+AUTHOR: jwalsh + Claude
#+DATE: 2025-07-15
#+STARTUP: overview

* Overview

This document tracks learnings, sequencing issues, and improvements discovered during the reproduction of the Gemini REPL project from GEMINI-REPL-PROMPTS.org. This is separate from the prompts under test.

* Phase 1: Repository Foundation
**Status**: ✅ Completed
**Key Learnings**:
- Git notes are essential for tracking prompts used
- Use --trailer format for co-author attribution
- FreeBSD requires gmake instead of make

* Phase 2: SETUP.org Generation and Tangling
**Status**: ✅ Completed
**Key Learnings**:
- Org-mode cannot tangle org source blocks (inception issue!)
- Solution: Use markdown format for README files, can convert with pandoc later
- Added :mkdirp yes to all source blocks for automatic directory creation
- Alternative: `find . -name 'README.md' -exec pandoc -f markdown -t org -o {}.org {} \;`

* Phase 3: SHARED-SETUP.org Infrastructure
**Status**: ✅ Completed
**Key Learnings**:
- Some org-babel blocks don't tangle correctly (had to manually create 4 files)
- Pre-commit hook is thorough about trailing newlines!
- Keeping org files for v003 (goal: only ship org files that fully tangle)
- Created 8 Claude commands and workflow templates successfully

* Phase 4: NODE-SETUP.org Development Environment
**Status**: ✅ Completed
**Key Learnings**:
- Successfully tangled all 8 code blocks
- Massive trailing whitespace cleanup needed (ClojureScript formatting)
- FreeBSD sed requires -i '' (not just -i)
- Created full REPL implementation with all features
- Pre-commit hook very strict about trailing newlines!

* Phase 5: GITHUB-SETUP.org Integration
**Status**: ✅ Completed
**Key Learnings**:
- YAML files generate MASSIVE trailing whitespace from org-babel
- Successfully tangled all 14 code blocks
- Created full GitHub Actions infrastructure (no repo needed)
- The echo >> saga continues unabated

* Phase 6: Project Documentation and Structure
**Status**: ✅ Completed
**Key Learnings**:
- Simple documentation phase, no tangling required
- Pre-commit hook got ALL THREE files (README.org, LICENSE, CLAUDE.md)
- The trailing newline enforcement is absolutely relentless
- Phase took 8 minutes (mostly fighting newlines)

* Sequencing Issues Discovered

1. **Build scripts reference uninstalled dependencies**
   - scripts/build.sh calls `npx shadow-cljs` before NODE-SETUP.org runs
   - Not a blocker, just means scripts can't run until Phase 4

2. **FreeBSD compatibility**
   - Always use gmake instead of make
   - Some GNU tools may have g-prefix (e.g., ggrep vs grep)

3. **Missing formal tools**
   - tla2tools.jar and alloy.jar need manual download
   - Not created by tangling, only referenced

* Environment Baseline

**Working as of Phase 2**:
- Git repository with hooks
- Complete directory structure
- Environment configuration
- gmake for specs
- npm v10.9.2 available
- Java available

**Waiting on future phases**:
- package.json
- shadow-cljs.edn
- ClojureScript source
- Claude commands
- Formal verification tools

* Time and Progress Tracking

- Started: ~21:35 EDT
- Phase 4 complete: 22:21 EDT
- Phase 5 complete: 22:29 EDT
- Phase 6 complete: 22:37 EDT
- Time elapsed: ~46 minutes for 4/17 phases (24%)
- Estimated total: ~3.2 hours at current pace
- No GitHub repo created (all local git)

* Improvements for Next Reproduction

1. Consider consolidating SETUP.org files into one comprehensive setup
2. Use markdown for all tangled documentation files
3. Add explicit gmake usage in all Makefiles for BSD compatibility
4. Create a bootstrap script that checks prerequisites
5. Add phase verification commands at end of each phase
6. Pre-add trailing newlines to all org-mode source blocks
7. Run whitespace cleanup as part of tangling process
8. Consider single MEGA-SETUP.org instead of 5 separate files
9. Add platform detection for make vs gmake
10. Ship a pre-commit hook that's less aggressive about whitespace

* Clarifications for Future Reproductions

** Meta Context
This is a build reproduction exercise. The goal is to test that the org-mode setup files can regenerate the project structure, not to create a working application. Focus on the tangling/generation process itself.

** Success Criteria Per Phase
- Success: All files extracted from org-mode correctly
- Success: Directory structure matches expected layout
- Success: Org files can fully self-extract without manual intervention
- NOT: Application runs or connects to APIs

** Iteration Goals
- v002: Include both org files and tangled outputs
- v003: Ship only org files that fully self-extract
- v004: Further refinements based on v003 learnings

** Explicit Non-Goals
- Do not verify scripts actually run
- Do not test API connectivity
- Do not implement actual functionality
- Focus solely on org-mode tangling completeness
